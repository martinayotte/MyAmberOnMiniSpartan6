   1              	# 1 "start.S"
   1              	/*----------------------------------------------------------------
   0              	
   0              	
   2              	//                                                              //
   3              	//  start.S                                                     //
   4              	//                                                              //
   5              	//  This file is part of the Amber project                      //
   6              	//  http://www.opencores.org/project,amber                      //
   7              	//                                                              //
   8              	//  Description                                                 //
   9              	//  Assembly routines for boot-loader.                          //
  10              	//  As boot-loader is a stand-alone application, it needs a     //
  11              	//  simple start function written in assembly to call the       //
  12              	//  C code main() function.                                     //
  13              	//                                                              //
  14              	//  Author(s):                                                  //
  15              	//      - Conor Santifort, csantifort.amber@gmail.com           //
  16              	//                                                              //
  17              	//////////////////////////////////////////////////////////////////
  18              	//                                                              //
  19              	// Copyright (C) 2010 Authors and OPENCORES.ORG                 //
  20              	//                                                              //
  21              	// This source file may be used and distributed without         //
  22              	// restriction provided that this copyright statement is not    //
  23              	// removed from the file and that any derivative work contains  //
  24              	// the original copyright notice and the associated disclaimer. //
  25              	//                                                              //
  26              	// This source file is free software; you can redistribute it   //
  27              	// and/or modify it under the terms of the GNU Lesser General   //
  28              	// Public License as published by the Free Software Foundation; //
  29              	// either version 2.1 of the License, or (at your option) any   //
  30              	// later version.                                               //
  31              	//                                                              //
  32              	// This source is distributed in the hope that it will be       //
  33              	// useful, but WITHOUT ANY WARRANTY; without even the implied   //
  34              	// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      //
  35              	// PURPOSE.  See the GNU Lesser General Public License for more //
  36              	// details.                                                     //
  37              	//                                                              //
  38              	// You should have received a copy of the GNU Lesser General    //
  39              	// Public License along with this source; if not, download it   //
  40              	// from http://www.opencores.org/lgpl.shtml                     //
  41              	//                                                              //
  42              	----------------------------------------------------------------*/
  43              	
  44              	#include "amber_registers.h"
   1              	/*----------------------------------------------------------------
  45              	
  46              	
  47              	/* Defined in vmlinux/include/asm-arm/setup.h */
  48              	#define ATAG_CORE       0x54410001
  49              	#define ATAG_MEM	0x54410002
  50              	#define ATAG_INITRD	0x54410005
  51              	#define ATAG_RAMDISK    0x54410004
  52              	#define ATAG_NONE	0x00000000
  53              	
  54              	#define ATAG_CORE_SIZE    ((2*4 + 3*4) >> 2)
  55              	#define ATAG_MEM_SIZE     ((2*4 + 2*4) >> 2)
  56              	#define ATAG_INITRD_SIZE  ((2*4 + 2*4) >> 2)
  57              	#define ATAG_RAMDISK_SIZE ((2*4 + 3*4) >> 2)
  58              	
  59              	
  60              	/* from vmlinux/arch/arm/kernel/compat.c */
  61              	#define FLAG_READONLY	1
  62              	
  63              	/* from the list in wmlinux/arch/arm/tools/mach-types */
  64              	#define MACH_TYPE_A5K   11
  65              	
  66              	
  67              	
  68              		.section .text
  69              		.globl	start 
  70              	start:               
  71              	        /* 0x00 Reset Interrupt vector address */
  72 0000 060000EA 	        b       startup
  73              	
  74              	        /* 0x04 Undefined Instruction Interrupt vector address */
  75 0004 FEFFFFEA 	        b       _testfail
  76              	        
  77              	        /* 0x08 SWI Interrupt vector address */
  78 0008 FEFFFFEA 	        b       _testfail
  79              	        
  80              	        /* 0x0c Prefetch abort Interrupt vector address */
  81 000c FEFFFFEA 	        b       _testfail
  82              	        
  83              	        /* 0x10 Data abort Interrupt vector address */
  84 0010 FEFFFFEA 	        b       _testfail
  85 0014 FEFFFFEA 	        b       _testfail
  86              	        
  87              	        /* 0x18 IRQ vector address */
  88 0018 FEFFFFEA 	        b       _testfail
  89              	        
  90              	        /* 0x1c FIRQ vector address */
  91 001c FEFFFFEA 	        b       _testfail
  92              	        
  93              	startup:
  94              	        /* Unset interrupt mask bits, stay in svc mode */
  95 0020 0300A0E3 	        mov     r0, #0x00000003
  96 0024 00F03FE1 	        teqp    pc, r0 
  97              	 
  98              	        @ Enable the cache
  99 0028 0000E0E3 	        mov     r0, #0xffffffff
 100 002c 100F03EE 		mcr	15, 0, r0, cr3, cr0, 0   @ cacheable area
 101 0030 0100A0E3 	        mov     r0, #1
 102 0034 100F02EE 		mcr	15, 0, r0, cr2, cr0, 0   @ cache enable
 103              	        
 104              	        @ init SP
 105 0038 98D09FE5 	        ldr     sp, AdrStack
 106              	
 107              	//        @ Set 32MB memory mode
 108              	//        ldr     r0, AdrMemCtrl
 109              	//        mov     r1, #1
 110              	//        str     r1, [r0]
 111              	        
 112              	        .extern main
 113 003c FEFFFFEB 	        bl      main
 114              	                
 115              	        @ jump to program at r0
 116              		.globl _jump_to_program
 117              	_jump_to_program:
 118              	
 119              	        
 120              	        @ ----------------------------------------------
 121              	        @ Copy ATAG structure to AdrBootParams
 122              	        @ ----------------------------------------------
 123 0040 18119FE5 	        ldr     r1, AdrBootParams
 124 0044 B8209FE5 	        ldr     r2, AdrATAGBase
 125 0048 B8309FE5 	        ldr     r3, AdeEndATAG
 126              	        
 127 004c 030052E1 	1:      cmp     r2, r3
 128 0050 0200000A 	        beq     2f
 129 0054 044092E4 	        ldr     r4, [r2], #4
 130 0058 044081E4 	        str     r4, [r1], #4
 131 005c FAFFFFEA 	        b       1b
 132              	        
 133              	        @ Set memc page tables
 134 0060 FC209FE5 	2:      ldr     r2, AdrPageTabes        
 135 0064 0030A0E3 	        mov     r3, #0
 136 0068 2840A0E3 	        mov     r4, #40
 137 006c 043082E4 	3:      str     r3,[r2],#4
 138 0070 014054E2 	        subs    r4, r4, #1
 139 0074 FCFFFF1A 	        bne     3b
 140              	           
 141              	        @ ----------------------------------------------
 142              	        @ jump to start of program in svc mode with interrupts disabled
 143              	        @ ----------------------------------------------
 144 0078 0040A0E1 	        mov     r4, r0
 145 007c C34384E3 	        orr     r4, #0x0c000003
 146 0080 0000A0E3 	        mov     r0, #0  
 147 0084 04F0A0E1 	        mov     pc, r4
 148              	
 149              	
 150              	        @ ----------------------------------------------
 151              	        @ Print CPU Core status
 152              	        @ ----------------------------------------------
 153              		.globl	 _core_status
 154              	_core_status:
 155 0088 00402DE9 	        stmdb   sp!,{lr}
 156 008c FF1F2DE9 	        stmdb   sp!,{r0-r12}
 157 0090 0040A0E3 	        mov     r4, #0
 158 0094 0D50A0E1 	        mov     r5, sp
 159 0098 0E60A0E1 	        mov     r6, lr
 160              	        
 161 009c C4009FE5 	1:      ldr     r0, =Status_Message
 162 00a0 0410A0E1 	        mov     r1, r4
 163 00a4 042095E4 	        ldr     r2, [r5], #4
 164 00a8 FEFFFFEB 	        bl      printf
 165              	        
 166 00ac 0D0054E3 	        cmp     r4, #13
 167 00b0 01408412 	        addne   r4, r4, #1
 168 00b4 F8FFFF1A 	        bne     1b
 169              	        
 170              	        @ Stack Pointer
 171 00b8 AC009FE5 	        ldr     r0, =SPStatus_Message
 172 00bc 0D10A0E1 	        mov     r1, sp
 173 00c0 FEFFFFEB 	        bl      printf
 174              	        
 175              	        @ Program Counter - Use Link Register value because
 176              	        @ want the PC value of whatever called this function
 177 00c4 A4009FE5 	        ldr     r0, =PCStatus_Message
 178 00c8 041046E2 	        sub     r1, r6, #4
 179 00cc FEFFFFEB 	        bl      printf
 180              	                
 181 00d0 FF1FBDE8 	        ldmia  sp!,{r0-r12}
 182 00d4 0080FDE8 	        ldmia  sp!,{pc}^
 183              	        
 184              	
 185              	/* stack at top of ddr3 memory space */
 186              	//AdrStack:                   .word 0x02000000
 187 00d8 601F0000 	AdrStack:                   .word 0x00001f60
 188 00dc 200000F0 	AdrMemCtrl:                 .word ADR_AMBER_TEST_MEM_CTRL
 189              	
 190              	/* core status messages */
 191 00e0 72253264 	Status_Message:             .ascii "r%2d  %08x\n\00"
 191      20202530 
 191      38780A00 
 192 00ec 73702020 	SPStatus_Message:           .ascii "sp   %08x\n\00"
 192      20253038 
 192      780A00
 193 00f7 70632020 	PCStatus_Message:           .ascii "pc   %08x\n\00"
 193      20253038 
 193      780A00
 194              	
 195 0102 0000     	                            .align 2
 196 0104 0C010000 	AdrATAGBase:                .word ATAGBase
 197 0108 5C010000 	AdeEndATAG:                 .word EndATAG
 198              	
 199 010c 05000000 	ATAGBase:                   .word ATAG_CORE_SIZE
 200 0110 01004154 	                            .word ATAG_CORE
 201 0114 01000000 	                            .word FLAG_READONLY     @ flags
 202 0118 00100000 	                            .word 4096              @ page size
 203 011c 00000000 	                            .word 0x0               @ rootdev
 204              	                
 205 0120 04000000 	                            .word ATAG_MEM_SIZE
 206 0124 02004154 	                            .word ATAG_MEM
 207 0128 00000002 	                            .word 32*1024*1024      @ size - 32MB
 208 012c 00000000 	                            .word 0x0               @ start
 209              	
 210 0130 05000000 	                            .word ATAG_RAMDISK_SIZE
 211 0134 04004154 	                            .word ATAG_RAMDISK
 212 0138 01000000 	                            .word 1                 @ flags: bit 0 = load, bit 1 = prompt
 213 013c D0000000 	                            .word 0x000000d0        @ size in 1k blocks
 214 0140 00008000 	                            .word 0x00800000        @ physical address of start of ramdisk
 215              	
 216 0144 04000000 	                            .word ATAG_INITRD_SIZE
 217 0148 05004154 	                            .word ATAG_INITRD
 218 014c 00008002 	                            .word 0x02800000        @ virtual address of start of initrd image
 219 0150 00200300 	                            .word 0x00032000        @ size = 200k
 220              	                
 221 0154 00000000 	                            .word ATAG_NONE
 222 0158 00000000 	                            .word 0x0
 223 015c 00000000 	EndATAG:                    .word 0x0
 224              	
 225 0160 00C00700 	AdrBootParams:              .word 0x7c000
 226 0164 0010F003 	AdrPageTabes:               .word 0x3f01000
 226      E0000000 
 226      EC000000 
 226      F7000000 
DEFINED SYMBOLS
             start.S:70     .text:00000000 start
             start.S:93     .text:00000020 startup
             start.S:72     .text:00000000 $a
             start.S:187    .text:000000d8 AdrStack
             start.S:117    .text:00000040 _jump_to_program
             start.S:225    .text:00000160 AdrBootParams
             start.S:196    .text:00000104 AdrATAGBase
             start.S:197    .text:00000108 AdeEndATAG
             start.S:226    .text:00000164 AdrPageTabes
             start.S:154    .text:00000088 _core_status
             start.S:191    .text:000000e0 Status_Message
             start.S:192    .text:000000ec SPStatus_Message
             start.S:193    .text:000000f7 PCStatus_Message
             start.S:187    .text:000000d8 $d
             start.S:188    .text:000000dc AdrMemCtrl
             start.S:196    .text:00000104 $d
             start.S:199    .text:0000010c ATAGBase
             start.S:223    .text:0000015c EndATAG
                   .debug_aranges:0000000c $d
             start.S:195    .text:00000102 $d

UNDEFINED SYMBOLS
_testfail
main
printf
